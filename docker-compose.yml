version: '3.8'

services:
  # AgentScope Runtime - Core orchestration
  agentscope-runtime:
    image: agentscope/runtime:latest
    container_name: agentscope-runtime
    ports:
      - "8080:8080"
    environment:
      - SANDBOX_MODE=true
      - MEMORY_BACKEND=qdrant
      - VECTOR_DB_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      - OLLAMA_URL=http://ollama:11434
      - LANGFUSE_URL=http://langfuse:3001
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
    volumes:
      - ./agents:/app/agents
      - ./workflows:/app/workflows
      - ./config:/app/config
    depends_on:
      - ollama
      - qdrant
      - supabase-db
      - langfuse
    restart: unless-stopped
    networks:
      - llm-network

  # Ollama - Local LLM serving
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - llm-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Open WebUI - Chat interface
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    ports:
      - "3000:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - ENABLE_RAG_HYBRID_SEARCH=true
      - ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION=false
      - RAG_EMBEDDING_ENGINE=ollama
      - RAG_EMBEDDING_MODEL=nomic-embed-text
      - SEARXNG_QUERY_URL=http://searxng:8080/search?q=<query>
    volumes:
      - open_webui_data:/app/backend/data
    depends_on:
      - ollama
      - searxng
    restart: unless-stopped
    networks:
      - llm-network

  # Supabase Database
  supabase-db:
    image: supabase/postgres:15.1.1.78
    container_name: supabase-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
      - ./supabase/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - llm-network

  # Supabase Studio
  supabase-studio:
    image: supabase/studio:20240729-ce42139
    container_name: supabase-studio
    ports:
      - "8000:3000"
    environment:
      - SUPABASE_URL=http://supabase-kong:8000
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - STUDIO_PG_META_URL=http://supabase-meta:8080
    depends_on:
      - supabase-kong
    restart: unless-stopped
    networks:
      - llm-network

  # Supabase Kong (API Gateway)
  supabase-kong:
    image: kong:2.8.1
    container_name: supabase-kong
    ports:
      - "8001:8000"
      - "8444:8443"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/var/lib/kong/kong.yml
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_PLUGINS=request-id,kong-offline-plugins,basic-auth,key-auth,cors
    volumes:
      - ./supabase/kong.yml:/var/lib/kong/kong.yml
    restart: unless-stopped
    networks:
      - llm-network

  # Supabase Meta
  supabase-meta:
    image: supabase/postgres-meta:v0.80.0
    container_name: supabase-meta
    environment:
      - PG_META_PORT=8080
      - PG_META_DB_HOST=supabase-db
      - PG_META_DB_PORT=5432
      - PG_META_DB_NAME=postgres
      - PG_META_DB_USER=postgres
      - PG_META_DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - supabase-db
    restart: unless-stopped
    networks:
      - llm-network

  # Qdrant - Vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - llm-network

  # Neo4j - Knowledge graph
  neo4j:
    image: neo4j:5.15-community
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    networks:
      - llm-network

  # n8n - Workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=supabase-db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      - supabase-db
    restart: unless-stopped
    networks:
      - llm-network

  # Langfuse - LLM observability
  langfuse:
    image: langfuse/langfuse:2
    container_name: langfuse
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/langfuse
      - NEXTAUTH_SECRET=${LANGFUSE_SECRET_KEY}
      - SALT=${LANGFUSE_SALT}
      - NEXTAUTH_URL=http://localhost:3001
      - TELEMETRY_ENABLED=false
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
    depends_on:
      - supabase-db
    restart: unless-stopped
    networks:
      - llm-network

  # SearXNG - Private search engine
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    ports:
      - "8888:8080"
    environment:
      - SEARXNG_BASE_URL=http://localhost:8888/
    volumes:
      - ./searxng:/etc/searxng
    restart: unless-stopped
    networks:
      - llm-network

  # Caddy - Reverse proxy (for public deployment)
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    networks:
      - llm-network
    profiles:
      - public

volumes:
  ollama_data:
  open_webui_data:
  supabase_db_data:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  n8n_data:
  caddy_data:
  caddy_config:

networks:
  llm-network:
    driver: bridge
